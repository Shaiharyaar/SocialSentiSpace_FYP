{"ast":null,"code":"/**\n * callbag-map\n * -----------\n *\n * Callbag operator that applies a transformation on data passing through it.\n * Works on either pullable or listenable sources.\n *\n * `npm install callbag-map`\n *\n * Example:\n *\n *     const fromIter = require('callbag-from-iter');\n *     const iterate = require('callbag-iterate');\n *     const map = require('callbag-map');\n *\n *     const source = map(x => x * 0.1)(fromIter([10,20,30,40]));\n *\n *     iterate(x => console.log(x))(source); // 1\n *                                           // 2\n *                                           // 3\n *                                           // 4\n */\nconst map = f => source => (start, sink) => {\n  if (start !== 0) return;\n  source(0, (t, d) => {\n    sink(t, t === 1 ? f(d) : d);\n  });\n};\n\nmodule.exports = map;","map":{"version":3,"sources":["C:/Shaiharyaar Ahmad/Final Year Project/1.Main/socialsentispace_frontend_/node_modules/callbag-map/readme.js"],"names":["map","f","source","start","sink","t","d","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAMA,GAAG,GAAGC,CAAC,IAAIC,MAAM,IAAI,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC1C,MAAID,KAAK,KAAK,CAAd,EAAiB;AACjBD,EAAAA,MAAM,CAAC,CAAD,EAAI,CAACG,CAAD,EAAIC,CAAJ,KAAU;AAClBF,IAAAA,IAAI,CAACC,CAAD,EAAIA,CAAC,KAAK,CAAN,GAAUJ,CAAC,CAACK,CAAD,CAAX,GAAiBA,CAArB,CAAJ;AACD,GAFK,CAAN;AAGD,CALD;;AAOAC,MAAM,CAACC,OAAP,GAAiBR,GAAjB","sourcesContent":["/**\n * callbag-map\n * -----------\n *\n * Callbag operator that applies a transformation on data passing through it.\n * Works on either pullable or listenable sources.\n *\n * `npm install callbag-map`\n *\n * Example:\n *\n *     const fromIter = require('callbag-from-iter');\n *     const iterate = require('callbag-iterate');\n *     const map = require('callbag-map');\n *\n *     const source = map(x => x * 0.1)(fromIter([10,20,30,40]));\n *\n *     iterate(x => console.log(x))(source); // 1\n *                                           // 2\n *                                           // 3\n *                                           // 4\n */\n\nconst map = f => source => (start, sink) => {\n  if (start !== 0) return;\n  source(0, (t, d) => {\n    sink(t, t === 1 ? f(d) : d)\n  });\n};\n\nmodule.exports = map;\n"]},"metadata":{},"sourceType":"script"}