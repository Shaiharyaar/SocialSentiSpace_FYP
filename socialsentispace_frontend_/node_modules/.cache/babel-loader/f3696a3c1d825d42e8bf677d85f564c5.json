{"ast":null,"code":"/**\n * callbag-concat\n * --------------\n *\n * Callbag factory that concatenates the data from multiple (2 or more)\n * callbag sources. It starts each source at a time: waits for the previous\n * source to end before starting the next source. Works with both pullable\n * and listenable sources.\n *\n * `npm install callbag-concat`\n *\n * Example:\n *\n *     const fromIter = require('callbag-from-iter');\n *     const iterate = require('callbag-iterate');\n *     const concat = require('callbag-concat');\n *\n *     const source = concat(fromIter([10,20,30]), fromIter(['a','b']));\n *\n *     iterate(x => console.log(x))(source); // 10\n *                                           // 20\n *                                           // 30\n *                                           // a\n *                                           // b\n */\nconst UNIQUE = {};\n\nconst concat = (...sources) => (start, sink) => {\n  if (start !== 0) return;\n  const n = sources.length;\n\n  if (n === 0) {\n    sink(0, () => {});\n    sink(2);\n    return;\n  }\n\n  let i = 0;\n  let sourceTalkback;\n  let lastPull = UNIQUE;\n\n  const talkback = (t, d) => {\n    if (t === 1) lastPull = d;\n    sourceTalkback(t, d);\n  };\n\n  (function next() {\n    if (i === n) {\n      sink(2);\n      return;\n    }\n\n    sources[i](0, (t, d) => {\n      if (t === 0) {\n        sourceTalkback = d;\n        if (i === 0) sink(0, talkback);else if (lastPull !== UNIQUE) sourceTalkback(1, lastPull);\n      } else if (t === 2 && d) {\n        sink(2, d);\n      } else if (t === 2) {\n        i++;\n        next();\n      } else {\n        sink(t, d);\n      }\n    });\n  })();\n};\n\nexport default concat;","map":{"version":3,"sources":["C:/Shaiharyaar Ahmad/Final Year Project/1.Main/socialsentispace_frontend_/node_modules/callbag-concat/readme.js"],"names":["UNIQUE","concat","sources","start","sink","n","length","i","sourceTalkback","lastPull","talkback","t","d","next"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMA,MAAM,GAAG,EAAf;;AAEA,MAAMC,MAAM,GAAG,CAAC,GAAGC,OAAJ,KAAgB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC9C,MAAID,KAAK,KAAK,CAAd,EAAiB;AACjB,QAAME,CAAC,GAAGH,OAAO,CAACI,MAAlB;;AACA,MAAID,CAAC,KAAK,CAAV,EAAa;AACXD,IAAAA,IAAI,CAAC,CAAD,EAAI,MAAM,CAAE,CAAZ,CAAJ;AACAA,IAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACD,MAAIG,CAAC,GAAG,CAAR;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAQ,GAAGT,MAAf;;AACA,QAAMU,QAAQ,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzB,QAAID,CAAC,KAAK,CAAV,EAAaF,QAAQ,GAAGG,CAAX;AACbJ,IAAAA,cAAc,CAACG,CAAD,EAAIC,CAAJ,CAAd;AACD,GAHD;;AAIA,GAAC,SAASC,IAAT,GAAgB;AACf,QAAIN,CAAC,KAAKF,CAAV,EAAa;AACXD,MAAAA,IAAI,CAAC,CAAD,CAAJ;AACA;AACD;;AACDF,IAAAA,OAAO,CAACK,CAAD,CAAP,CAAW,CAAX,EAAc,CAACI,CAAD,EAAIC,CAAJ,KAAU;AACtB,UAAID,CAAC,KAAK,CAAV,EAAa;AACXH,QAAAA,cAAc,GAAGI,CAAjB;AACA,YAAIL,CAAC,KAAK,CAAV,EAAaH,IAAI,CAAC,CAAD,EAAIM,QAAJ,CAAJ,CAAb,KACK,IAAID,QAAQ,KAAKT,MAAjB,EAAyBQ,cAAc,CAAC,CAAD,EAAIC,QAAJ,CAAd;AAC/B,OAJD,MAIO,IAAIE,CAAC,KAAK,CAAN,IAAWC,CAAf,EAAkB;AACvBR,QAAAA,IAAI,CAAC,CAAD,EAAIQ,CAAJ,CAAJ;AACD,OAFM,MAEA,IAAID,CAAC,KAAK,CAAV,EAAa;AAClBJ,QAAAA,CAAC;AACDM,QAAAA,IAAI;AACL,OAHM,MAGA;AACLT,QAAAA,IAAI,CAACO,CAAD,EAAIC,CAAJ,CAAJ;AACD;AACF,KAbD;AAcD,GAnBD;AAoBD,CAnCD;;AAqCA,eAAeX,MAAf","sourcesContent":["/**\n * callbag-concat\n * --------------\n *\n * Callbag factory that concatenates the data from multiple (2 or more)\n * callbag sources. It starts each source at a time: waits for the previous\n * source to end before starting the next source. Works with both pullable\n * and listenable sources.\n *\n * `npm install callbag-concat`\n *\n * Example:\n *\n *     const fromIter = require('callbag-from-iter');\n *     const iterate = require('callbag-iterate');\n *     const concat = require('callbag-concat');\n *\n *     const source = concat(fromIter([10,20,30]), fromIter(['a','b']));\n *\n *     iterate(x => console.log(x))(source); // 10\n *                                           // 20\n *                                           // 30\n *                                           // a\n *                                           // b\n */\n\nconst UNIQUE = {};\n\nconst concat = (...sources) => (start, sink) => {\n  if (start !== 0) return;\n  const n = sources.length;\n  if (n === 0) {\n    sink(0, () => {});\n    sink(2);\n    return;\n  }\n  let i = 0;\n  let sourceTalkback;\n  let lastPull = UNIQUE;\n  const talkback = (t, d) => {\n    if (t === 1) lastPull = d;\n    sourceTalkback(t, d);\n  };\n  (function next() {\n    if (i === n) {\n      sink(2);\n      return;\n    }\n    sources[i](0, (t, d) => {\n      if (t === 0) {\n        sourceTalkback = d;\n        if (i === 0) sink(0, talkback);\n        else if (lastPull !== UNIQUE) sourceTalkback(1, lastPull);\n      } else if (t === 2 && d) {\n        sink(2, d);\n      } else if (t === 2) {\n        i++;\n        next();\n      } else {\n        sink(t, d);\n      }\n    });\n  })();\n};\n\nexport default concat;\n"]},"metadata":{},"sourceType":"module"}